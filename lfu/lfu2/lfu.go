package lfu

import (
	"fmt"
	"sort"
)

type Delete struct {
	times int
	time  int
}
type LFUCache struct {
	Val    map[int]int
	delete map[int]Delete
	count  int
	key    int
	num    int
}

func Constructor(capacity int) LFUCache {
	p := LFUCache{}
	p.Val = make(map[int]int, 0)
	p.delete = make(map[int]Delete, 0)
	p.count = capacity
	p.key = 0
	p.num = 0
	return p
}

func (this *LFUCache) Get(key int) int {

	this.Debug()
	fmt.Print(` get  [`, key, `] `)

	if v, ok := this.Val[key]; ok {
		this.key++
		this.delete[key] = Delete{time: this.key, times: this.delete[key].times + 1}
		return v
	}
	return -1
}

func (this *LFUCache) Put(key int, value int) {

	this.Debug()
	fmt.Print(` put  [ `, key, `:`, value, `] `)

	this.key++
	if this.count == 0 {
		return
	}
	if _, ok := this.Val[key]; ok {
		this.Val[key] = value
		this.delete[key] = Delete{time: this.key, times: this.delete[key].times + 1}
		return
	}
	if this.num < this.count {
		this.num++
	} else {
		var kk int = -1
		Time, Times := 1000, 10000
		for k, _ := range this.Val {
			if kk == -1 || this.delete[k].times < Times || this.delete[k].times == Times && this.delete[k].time < Time {
				kk = k
				Time = this.delete[k].time
				Times = this.delete[k].times
			}
		}
		delete(this.Val, kk)
		delete(this.delete, kk)
	}
	this.Val[key] = value
	this.delete[key] = Delete{time: this.key, times: 1}
}

func (this *LFUCache) Debug() {
	fmt.Print(` key: `)

	//for key, _ := range this.Val {
	//	//fmt.Print(` [`, key, v.Value.(*KV).Times, `] `)
	//	fmt.Print(` [`, key, this.delete[key].times, `] `)
	//}

	type kv struct {
		key   int
		value int
		times int
		time  int
	}

	var s []kv
	for key, _ := range this.Val {
		s = append(s,
			kv{
				key:   key,
				value: this.Val[key],
				times: this.delete[key].times,
				time:  this.delete[key].time,
			})
	}

	sort.Slice(s,

		func(i, j int) bool {

			if s[i].times < s[j].times {
				return false
			}

			if s[i].times == s[j].times && s[i].time < s[j].time {
				return false
			}
			return true
		},
	)

	for _, v := range s {
		//fmt.Print(` [`, key, v.Value.(*KV).Times, `] `)
		fmt.Print(` [`, v.key, v.times, `] `)
	}

	//fmt.Print(` minfreq: `)
	//fmt.Printf(` (%d) `, this.minFreq)
	//
	//l := this.freqMap[this.minFreq]
	//n := l.Front()
	//for n != nil {
	//	fmt.Print(` [`, n.Value.(*KV).Key, `] `)
	//	n = n.Next()
	//}

	fmt.Println()

	//for key, value := range this.freqMap {
	//	fmt.Print(` freq `, key)
	//
	//	n := value.Front()
	//	for n != nil {
	//		fmt.Print(` n `, n.Value)
	//		n = n.Next()
	//	}
	//}
	//fmt.Println()
	//fmt.Println(` minFreq `, this.minFreq)

}

/*

 key:
 put  [ 10:13]  key:  [10 1]
 put  [ 3:17]  key:  [3 1]  [10 1]
 put  [ 6:11]  key:  [10 1]  [3 1]  [6 1]
 put  [ 10:5]  key:  [10 2]  [3 1]  [6 1]
 put  [ 9:10]  key:  [10 2]  [3 1]  [6 1]  [9 1]
 get  [13]  key:  [10 2]  [3 1]  [6 1]  [9 1]
 put  [ 2:19]  key:  [10 2]  [3 1]  [6 1]  [9 1]  [2 1]
 get  [2]  key:  [3 1]  [6 1]  [9 1]  [2 2]  [10 2]
 get  [3]  key:  [10 2]  [3 2]  [6 1]  [9 1]  [2 2]
 put  [ 5:25]  key:  [9 1]  [2 2]  [5 1]  [10 2]  [3 2]  [6 1]
 get  [8]  key:  [3 2]  [6 1]  [9 1]  [2 2]  [5 1]  [10 2]
 put  [ 9:22]  key:  [2 2]  [5 1]  [10 2]  [3 2]  [6 1]  [9 2]
 put  [ 5:5]  key:  [10 2]  [3 2]  [6 1]  [9 2]  [2 2]  [5 2]
 put  [ 1:30]  key:  [10 2]  [3 2]  [6 1]  [9 2]  [2 2]  [5 2]  [1 1]
 get  [11]  key:  [1 1]  [10 2]  [3 2]  [6 1]  [9 2]  [2 2]  [5 2]
 put  [ 9:12]  key:  [10 2]  [3 2]  [6 1]  [9 3]  [2 2]  [5 2]  [1 1]
 get  [7]  key:  [10 2]  [3 2]  [6 1]  [9 3]  [2 2]  [5 2]  [1 1]
 get  [5]  key:  [5 3]  [1 1]  [10 2]  [3 2]  [6 1]  [9 3]  [2 2]
 get  [8]  key:  [9 3]  [2 2]  [5 3]  [1 1]  [10 2]  [3 2]  [6 1]
 get  [9]  key:  [6 1]  [9 4]  [2 2]  [5 3]  [1 1]  [10 2]  [3 2]
 put  [ 4:30]  key:  [9 4]  [2 2]  [5 3]  [1 1]  [4 1]  [10 2]  [3 2]  [6 1]
 put  [ 9:3]  key:  [1 1]  [4 1]  [10 2]  [3 2]  [6 1]  [9 5]  [2 2]  [5 3]
 get  [9]  key:  [3 2]  [6 1]  [9 6]  [2 2]  [5 3]  [1 1]  [4 1]  [10 2]
 get  [10]  key:  [9 6]  [2 2]  [5 3]  [1 1]  [4 1]  [10 3]  [3 2]  [6 1]
 get  [10]  key:  [10 4]  [3 2]  [6 1]  [9 6]  [2 2]  [5 3]  [1 1]  [4 1]
 put  [ 6:14]  key:  [6 2]  [9 6]  [2 2]  [5 3]  [1 1]  [4 1]  [10 4]  [3 2]
 put  [ 3:1]  key:  [6 2]  [9 6]  [2 2]  [5 3]  [1 1]  [4 1]  [10 4]  [3 3]
 get  [3]  key:  [2 2]  [5 3]  [1 1]  [4 1]  [10 4]  [3 4]  [6 2]  [9 6]
 put  [ 10:11]  key:  [6 2]  [9 6]  [2 2]  [5 3]  [1 1]  [4 1]  [10 5]  [3 4]
 get  [8]  key:  [1 1]  [4 1]  [10 5]  [3 4]  [6 2]  [9 6]  [2 2]  [5 3]
 put  [ 2:14]  key:  [10 5]  [3 4]  [6 2]  [9 6]  [2 3]  [5 3]  [1 1]  [4 1]
 get  [1]  key:  [6 2]  [9 6]  [2 3]  [5 3]  [1 2]  [4 1]  [10 5]  [3 4]
 get  [5]  key:  [9 6]  [2 3]  [5 4]  [1 2]  [4 1]  [10 5]  [3 4]  [6 2]
 get  [4]  key:  [9 6]  [2 3]  [5 4]  [1 2]  [4 2]  [10 5]  [3 4]  [6 2]
 put  [ 11:4]  key:  [10 5]  [3 4]  [5 4]  [1 2]  [11 1]  [6 2]  [9 6]  [2 3]  [4 2]
 put  [ 12:24]  key:  [4 2]  [12 1]  [6 2]  [9 6]  [2 3]  [1 2]  [11 1]  [10 5]  [3 4]  [5 4]
 put  [ 5:18]  key:  [6 2]  [9 6]  [2 3]  [4 2]  [12 1]  [10 5]  [3 4]  [5 5]  [1 2]  [11 1]
 get  [13]  key:  [6 2]  [9 6]  [2 3]  [4 2]  [12 1]  [10 5]  [3 4]  [5 5]  [1 2]  [11 1]
 put  [ 7:23]  key:  [9 6]  [2 3]  [4 2]  [12 1]  [6 2]  [3 4]  [5 5]  [1 2]  [7 1]  [10 5]
 get  [8]  key:  [6 2]  [9 6]  [2 3]  [4 2]  [12 1]  [10 5]  [3 4]  [5 5]  [1 2]  [7 1]
 get  [12]  key:  [10 5]  [3 4]  [5 5]  [1 2]  [7 1]  [6 2]  [9 6]  [2 3]  [4 2]  [12 2]
 put  [ 3:27]  key:  [3 5]  [5 5]  [1 2]  [7 1]  [10 5]  [9 6]  [2 3]  [4 2]  [12 2]  [6 2]
 put  [ 2:12]  key:  [10 5]  [3 5]  [5 5]  [1 2]  [7 1]  [6 2]  [9 6]  [2 4]  [4 2]  [12 2]
 get  [5]  key:  [10 5]  [3 5]  [5 6]  [1 2]  [7 1]  [6 2]  [9 6]  [2 4]  [4 2]  [12 2]
 put  [ 2:9]  key:  [6 2]  [9 6]  [2 5]  [4 2]  [12 2]  [10 5]  [3 5]  [5 6]  [1 2]  [7 1]
 put  [ 13:4]  key:  [3 5]  [5 6]  [1 2]  [10 5]  [9 6]  [2 5]  [4 2]  [12 2]  [13 1]  [6 2]
 put  [ 8:18]  key:  [5 6]  [1 2]  [8 1]  [10 5]  [3 5]  [2 5]  [4 2]  [12 2]  [6 2]  [9 6]
 put  [ 1:7]  key:  [10 5]  [3 5]  [5 6]  [1 3]  [8 1]  [6 2]  [9 6]  [2 5]  [4 2]  [12 2]
 get  [6]  key:  [9 6]  [2 5]  [4 2]  [12 2]  [6 3]  [3 5]  [5 6]  [1 3]  [8 1]  [10 5]
 put  [ 9:29]  key:  [10 5]  [3 5]  [5 6]  [1 3]  [8 1]  [6 3]  [9 7]  [2 5]  [4 2]  [12 2]
 put  [ 8:21]  key:  [4 2]  [12 2]  [6 3]  [9 7]  [2 5]  [1 3]  [8 2]  [10 5]  [3 5]  [5 6]
 get  [5]  key:  [1 3]  [8 2]  [10 5]  [3 5]  [5 7]  [4 2]  [12 2]  [6 3]  [9 7]  [2 5]
 put  [ 6:30]  key:  [5 7]  [1 3]  [8 2]  [10 5]  [3 5]  [2 5]  [4 2]  [12 2]  [6 4]  [9 7]
 put  [ 1:12]  key:  [6 4]  [9 7]  [2 5]  [4 2]  [12 2]  [10 5]  [3 5]  [5 7]  [1 4]  [8 2]
 get  [10]  key:  [10 6]  [3 5]  [5 7]  [1 4]  [8 2]  [6 4]  [9 7]  [2 5]  [4 2]  [12 2]
 put  [ 4:15]  key:  [1 4]  [8 2]  [10 6]  [3 5]  [5 7]  [4 3]  [12 2]  [6 4]  [9 7]  [2 5]
 put  [ 7:22]  key:  [7 1]  [10 6]  [3 5]  [5 7]  [1 4]  [8 2]  [6 4]  [9 7]  [2 5]  [4 3]
 put  [ 11:26]  key:  [1 4]  [8 2]  [11 1]  [10 6]  [3 5]  [5 7]  [4 3]  [6 4]  [9 7]  [2 5]
 put  [ 8:17]  key:  [5 7]  [1 4]  [8 3]  [11 1]  [10 6]  [3 5]  [2 5]  [4 3]  [6 4]  [9 7]
 put  [ 9:29]  key:  [11 1]  [10 6]  [3 5]  [5 7]  [1 4]  [8 3]  [6 4]  [9 8]  [2 5]  [4 3]
 get  [5]  key:  [6 4]  [9 8]  [2 5]  [4 3]  [8 3]  [11 1]  [10 6]  [3 5]  [5 8]  [1 4]
 put  [ 3:4]  key:  [10 6]  [3 6]  [5 8]  [1 4]  [8 3]  [11 1]  [6 4]  [9 8]  [2 5]  [4 3]
 put  [ 11:30]  key:  [6 4]  [9 8]  [2 5]  [4 3]  [8 3]  [11 2]  [10 6]  [3 6]  [5 8]  [1 4]
 get  [12]  key:  [6 4]  [9 8]  [2 5]  [4 3]  [10 6]  [3 6]  [5 8]  [1 4]  [8 3]  [11 2]
 put  [ 4:29]  key:  [3 6]  [5 8]  [1 4]  [8 3]  [11 2]  [10 6]  [9 8]  [2 5]  [4 4]  [6 4]
 get  [3]  key:  [10 6]  [3 7]  [5 8]  [1 4]  [8 3]  [11 2]  [6 4]  [9 8]  [2 5]  [4 4]
 get  [9]  key:  [11 2]  [10 6]  [3 7]  [5 8]  [1 4]  [8 3]  [6 4]  [9 9]  [2 5]  [4 4]
 get  [6]  key:  [6 5]  [9 9]  [2 5]  [4 4]  [8 3]  [11 2]  [10 6]  [3 7]  [5 8]  [1 4]
 put  [ 3:4]  key:  [11 2]  [10 6]  [3 8]  [5 8]  [1 4]  [8 3]  [6 5]  [9 9]  [2 5]  [4 4]
 get  [1]  key:  [6 5]  [9 9]  [2 5]  [4 4]  [10 6]  [3 8]  [5 8]  [1 5]  [8 3]  [11 2]
 get  [10]  key:  [6 5]  [9 9]  [2 5]  [4 4]  [10 7]  [3 8]  [5 8]  [1 5]  [8 3]  [11 2]
 put  [ 3:29]  key:  [4 4]  [6 5]  [9 9]  [2 5]  [1 5]  [8 3]  [11 2]  [10 7]  [3 9]  [5 8]
 put  [ 10:28] PASS



*/

/*

 key:
 put  [ 10:13]  key:  [10]
 put  [ 3:17]  key:  [3]  [10]
 put  [ 6:11]  key:  [6]  [3]  [10]
 put  [ 10:5]  key:  [10]  [6]  [3]
 put  [ 9:10]  key:  [9]  [10]  [6]  [3]
 get  [13]  key:  [9]  [10]  [6]  [3]
 put  [ 2:19]  key:  [2]  [9]  [10]  [6]  [3]
 get  [2]  key:  [2]  [9]  [10]  [6]  [3]
 get  [3]  key:  [3]  [2]  [9]  [10]  [6]
 put  [ 5:25]  key:  [5]  [3]  [2]  [9]  [10]  [6]
 get  [8]  key:  [5]  [3]  [2]  [9]  [10]  [6]
 put  [ 9:22]  key:  [9]  [5]  [3]  [2]  [10]  [6]
 put  [ 5:5]  key:  [5]  [9]  [3]  [2]  [10]  [6]
 put  [ 1:30]  key:  [1]  [5]  [9]  [3]  [2]  [10]  [6]
 get  [11]  key:  [1]  [5]  [9]  [3]  [2]  [10]  [6]
 put  [ 9:12]  key:  [9]  [1]  [5]  [3]  [2]  [10]  [6]
 get  [7]  key:  [9]  [1]  [5]  [3]  [2]  [10]  [6]
 get  [5]  key:  [5]  [9]  [1]  [3]  [2]  [10]  [6]
 get  [8]  key:  [5]  [9]  [1]  [3]  [2]  [10]  [6]
 get  [9]  key:  [9]  [5]  [1]  [3]  [2]  [10]  [6]
 put  [ 4:30]  key:  [4]  [9]  [5]  [1]  [3]  [2]  [10]  [6]
 put  [ 9:3]  key:  [9]  [4]  [5]  [1]  [3]  [2]  [10]  [6]
 get  [9]  key:  [9]  [4]  [5]  [1]  [3]  [2]  [10]  [6]
 get  [10]  key:  [10]  [9]  [4]  [5]  [1]  [3]  [2]  [6]
 get  [10]  key:  [10]  [9]  [4]  [5]  [1]  [3]  [2]  [6]
 put  [ 6:14]  key:  [6]  [10]  [9]  [4]  [5]  [1]  [3]  [2]
 put  [ 3:1]  key:  [3]  [6]  [10]  [9]  [4]  [5]  [1]  [2]
 get  [3]  key:  [3]  [6]  [10]  [9]  [4]  [5]  [1]  [2]
 put  [ 10:11]  key:  [10]  [3]  [6]  [9]  [4]  [5]  [1]  [2]
 get  [8]  key:  [10]  [3]  [6]  [9]  [4]  [5]  [1]  [2]
 put  [ 2:14]  key:  [2]  [10]  [3]  [6]  [9]  [4]  [5]  [1]
 get  [1]  key:  [1]  [2]  [10]  [3]  [6]  [9]  [4]  [5]
 get  [5]  key:  [5]  [1]  [2]  [10]  [3]  [6]  [9]  [4]
 get  [4]  key:  [4]  [5]  [1]  [2]  [10]  [3]  [6]  [9]
 put  [ 11:4]  key:  [11]  [4]  [5]  [1]  [2]  [10]  [3]  [6]  [9]
 put  [ 12:24]  key:  [12]  [11]  [4]  [5]  [1]  [2]  [10]  [3]  [6]  [9]
 put  [ 5:18]  key:  [5]  [12]  [11]  [4]  [1]  [2]  [10]  [3]  [6]  [9]
 get  [13]  key:  [5]  [12]  [11]  [4]  [1]  [2]  [10]  [3]  [6]  [9]
 put  [ 7:23]  key:  [7]  [5]  [12]  [4]  [1]  [2]  [10]  [3]  [6]  [9]
 get  [8]  key:  [7]  [5]  [12]  [4]  [1]  [2]  [10]  [3]  [6]  [9]
 get  [12]  key:  [12]  [7]  [5]  [4]  [1]  [2]  [10]  [3]  [6]  [9]
 put  [ 3:27]  key:  [3]  [12]  [7]  [5]  [4]  [1]  [2]  [10]  [6]  [9]
 put  [ 2:12]  key:  [2]  [3]  [12]  [7]  [5]  [4]  [1]  [10]  [6]  [9]
 get  [5]  key:  [5]  [2]  [3]  [12]  [7]  [4]  [1]  [10]  [6]  [9]
 put  [ 2:9]  key:  [2]  [5]  [3]  [12]  [7]  [4]  [1]  [10]  [6]  [9]
 put  [ 13:4]  key:  [13]  [2]  [5]  [3]  [12]  [4]  [1]  [10]  [6]  [9]
 put  [ 8:18]  key:  [8]  [2]  [5]  [3]  [12]  [4]  [1]  [10]  [6]  [9]
 put  [ 1:7]  key:  [1]  [8]  [2]  [5]  [3]  [12]  [4]  [10]  [6]  [9]
 get  [6]  key:  [6]  [1]  [8]  [2]  [5]  [3]  [12]  [4]  [10]  [9]
 put  [ 9:29]  key:  [9]  [6]  [1]  [8]  [2]  [5]  [3]  [12]  [4]  [10]
 put  [ 8:21]  key:  [8]  [9]  [6]  [1]  [2]  [5]  [3]  [12]  [4]  [10]
 get  [5]  key:  [5]  [8]  [9]  [6]  [1]  [2]  [3]  [12]  [4]  [10]
 put  [ 6:30]  key:  [6]  [5]  [8]  [9]  [1]  [2]  [3]  [12]  [4]  [10]
 put  [ 1:12]  key:  [1]  [6]  [5]  [8]  [9]  [2]  [3]  [12]  [4]  [10]
 get  [10]  key:  [10]  [1]  [6]  [5]  [8]  [9]  [2]  [3]  [12]  [4]
 put  [ 4:15]  key:  [4]  [10]  [1]  [6]  [5]  [8]  [9]  [2]  [3]  [12]
 put  [ 7:22]  key:  [7]  [4]  [10]  [1]  [6]  [5]  [8]  [9]  [2]  [3]
 put  [ 11:26]  key:  [11]  [4]  [10]  [1]  [6]  [5]  [8]  [9]  [2]  [3]
 put  [ 8:17]  key:  [8]  [11]  [4]  [10]  [1]  [6]  [5]  [9]  [2]  [3]
 put  [ 9:29]  key:  [9]  [8]  [11]  [4]  [10]  [1]  [6]  [5]  [2]  [3]
 get  [5]  key:  [5]  [9]  [8]  [11]  [4]  [10]  [1]  [6]  [2]  [3]
 put  [ 3:4]  key:  [3]  [5]  [9]  [8]  [11]  [4]  [10]  [1]  [6]  [2]
 put  [ 11:30]  key:  [11]  [3]  [5]  [9]  [8]  [4]  [10]  [1]  [6]  [2]
 get  [12]  key:  [11]  [3]  [5]  [9]  [8]  [4]  [10]  [1]  [6]  [2]
 put  [ 4:29]  key:  [4]  [11]  [3]  [5]  [9]  [8]  [10]  [1]  [6]  [2]
 get  [3]  key:  [3]  [4]  [11]  [5]  [9]  [8]  [10]  [1]  [6]  [2]
 get  [9]  key:  [9]  [3]  [4]  [11]  [5]  [8]  [10]  [1]  [6]  [2]
 get  [6]  key:  [6]  [9]  [3]  [4]  [11]  [5]  [8]  [10]  [1]  [2]
 put  [ 3:4]  key:  [3]  [6]  [9]  [4]  [11]  [5]  [8]  [10]  [1]  [2]
 get  [1]  key:  [1]  [3]  [6]  [9]  [4]  [11]  [5]  [8]  [10]  [2]
 get  [10]  key:  [10]  [1]  [3]  [6]  [9]  [4]  [11]  [5]  [8]  [2]
 put  [ 3:29]  key:  [3]  [10]  [1]  [6]  [9]  [4]  [11]  [5]  [8]  [2]
 put  [ 10:28] PASS



*/
